--- a/cli/info.py
+++ b/cli/info.py
@@ -32,13 +32,18 @@ def show_info():
     # Database statistics using SimpleDB
     try:
         db = SimpleDB()
-        stats = db.get_content_stats()
+        # Get stats using inline SQL aggregations
+        cursor = db.execute("SELECT COUNT(*) as total_content, COUNT(DISTINCT CASE WHEN source_type='email_message' THEN 1 END) as total_emails, COUNT(DISTINCT CASE WHEN source_type='document' THEN 1 END) as total_pdfs, COUNT(DISTINCT CASE WHEN source_type='transcript' THEN 1 END) as total_transcripts FROM content_unified")
+        row = cursor.fetchone()
+        stats = {
+            'total_content': row['total_content'] if row else 0,
+            'total_emails': row['total_emails'] if row else 0,
+            'total_pdfs': row['total_pdfs'] if row else 0,
+            'total_transcripts': row['total_transcripts'] if row else 0,
+        }
 
         print("\n📁 Database Statistics:")
-        print(f"  📄 Raw documents: {stats.get('total_documents', 0)}")
         print(f"  📝 Text chunks: {stats.get('total_content', 0)}")
         print("  Breakdown by type:")
         print(f"    📧 Email chunks: {stats.get('total_emails', 0)}")
         print(f"    📄 PDF chunks: {stats.get('total_pdfs', 0)}")
         print(f"    🎙️  Transcript chunks: {stats.get('total_transcripts', 0)}")
@@ -56,8 +61,8 @@ def show_info():
 
         print("\n🧠 Vector Service:")
         print("  ✅ Status: Connected")
-        print(f"  📊 Collection: {store.collection}")
-        print(f"  📐 Dimensions: {store.dimensions} (Legal BERT)")
+        print(f"  📊 Collection: {store.collection_name}")
+        print(f"  📐 Dimensions: {store.vector_size} (Legal BERT)")
 
         # Try to get vector count
         try:
@@ -79,8 +84,8 @@ def show_info():
 
         print("\n🤖 Embedding Service:")
         print(f"  ✅ Model: {emb.model_name}")
-        print(f"  📐 Dimensions: {emb.dimensions}")
-        print(f"  🖥️  Device: {emb.device}")
+        print(f"  📐 Dimensions: {emb.vector_dimension}")
+        print(f"  🖥️  Device: {getattr(emb, 'device', 'cpu')}")
     except Exception as e:
         print("\n🤖 Embedding Service:")
         print(f"  ⚠️  Status: Not configured ({e})")
@@ -91,8 +96,6 @@ def show_info():
 
     try:
         # Use lib.search directly - no service object needed
-
-        get_search_service()
         print("  ✅ Semantic Search: AI-powered similarity using Legal BERT")
         print("  ✅ Hybrid Search: Combines both for best results")
         print("  ✅ Unified Search: Searches emails, PDFs, and transcriptions")