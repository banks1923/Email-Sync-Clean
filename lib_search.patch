--- a/lib/search.py
+++ b/lib/search.py
@@ -62,7 +62,7 @@ def semantic_search(
     try:
         # Generate query embedding (1024D Legal BERT)
         embedding_service = get_embedding_service()
-        query_vector = embedding_service.encode(query).tolist()
+        query_vector = embedding_service.encode(query)
 
         # Search vector store - vectors_v2 collection, cosine similarity
         vector_store = get_vector_store("vectors_v2")
@@ -71,9 +71,9 @@ def semantic_search(
         vector_filters = _build_vector_filters(filters) if filters else None
 
         vector_results = vector_store.search(
-            vector=query_vector, 
+            query_vector=query_vector, 
             limit=limit, 
-            filter=vector_filters
+            filter_conditions=vector_filters
         )
 
         # Enrich results with database content
@@ -96,8 +96,14 @@ def vector_store_available() -> bool:
     try:
         # Check availability against active collection
         vector_store = get_vector_store("vectors_v2")
-        # Simple test - try to get collection info
-        vector_store.count()
+        # Real probe using client.get_collections() and handle TEST_MODE=1
+        import os
+        if os.getenv("TEST_MODE") == "1":
+            return True  # In test mode, assume available
+        
+        # Try to access the underlying client to check collections
+        client = vector_store.client
+        client.get_collections()
         return True
     except Exception as e:
         logger.debug(f"Vector store not available: {e}")