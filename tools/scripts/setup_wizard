#!/usr/bin/env python3
"""
Email Sync System - Interactive Setup Wizard
Guides users through initial configuration and setup
"""

import json
import os
import subprocess
import sys
from pathlib import Path
from typing import Optional

import questionary
from rich.console import Console
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn

# Add project root to path
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

console = Console()

class SetupWizard:
    """Interactive setup wizard for Email Sync System"""
    
    def __init__(self):
        self.config = {}
        self.project_root = Path(__file__).parent.parent.parent
        self.service = SetupService(self.project_root)
        
    def welcome(self):
        """Display welcome message"""
        console.print("\n" + "="*70)
        console.print(Panel.fit(
            "[bold cyan]📧 Email Sync System Setup Wizard[/bold cyan]\n\n"
            "[yellow]Welcome to your personal email intelligence system![/yellow]\n\n"
            "This wizard will guide you through:\n"
            "• [green]Gmail API setup[/green] - Connect to your email\n"
            "• [blue]Smart filtering[/blue] - Choose which emails to sync\n"
            "• [purple]Vector search[/purple] - Optional semantic search (Qdrant)\n"
            "• [orange1]AI integration[/orange1] - MCP servers for Claude Desktop\n"
            "• [red]First sync[/red] - Test with real data\n\n"
            "[dim]Estimated time: 5-10 minutes[/dim]\n"
            "[dim]You can stop and resume anytime[/dim]",
            title="🚀 Email Sync Setup",
            border_style="cyan",
            padding=(1, 2)
        ))
        
        # Show system info
        console.print("\n[bold]System Information:[/bold]")
        console.print(f"  Python: {sys.version.split()[0]}")
        console.print(f"  Platform: {sys.platform}")
        console.print(f"  Project: {self.project_root}")
        
        ready = questionary.confirm(
            "\n🎯 Ready to get started?",
            default=True
        ).ask()
        
        if not ready:
            console.print("[yellow]No problem! You can run this wizard anytime with:[/yellow]")
            console.print("  [cyan]tools/scripts/setup_wizard[/cyan]")
            sys.exit(0)
        
    def check_python_version(self) -> bool:
        """Check if Python version is compatible"""
        version_ok = self.service.check_python_version()
        if version_ok:
            console.print(f"✅ Python {sys.version_info.major}.{sys.version_info.minor} detected")
            return True
        else:
            console.print(f"[red]❌ Python 3.9+ required (found {sys.version_info.major}.{sys.version_info.minor})[/red]")
            return False
            
    def install_dependencies(self) -> bool:
        """Install Python dependencies"""
        console.print("\n[bold]Installing Dependencies[/bold]")
        
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console,
        ) as progress:
            task = progress.add_task("Installing packages...", total=None)
            
            success = self.service.install_dependencies()
            
            if success:
                progress.update(task, description="✅ Dependencies installed")
                return True
            else:
                progress.update(task, description="❌ Installation failed")
                return False
                
    def setup_gmail(self) -> bool:
        """Set up Gmail authentication"""
        console.print("\n" + "="*50)
        console.print("[bold cyan]📧 Step 1: Gmail Setup[/bold cyan]")
        console.print("We need to connect to your Gmail account to sync emails.")
        
        # Check for existing credentials
        creds_path = self.project_root / "gmail" / "credentials.json"
        token_path = self.project_root / "gmail" / "token.json"
        
        if token_path.exists():
            console.print("\n[green]✅ Gmail is already configured![/green]")
            
            # Test the connection
            try:
                result = self.service.setup_gmail_auth()
                if result["success"]:
                    console.print("  [green]✓ Connection test: SUCCESS[/green]")
                    
                    use_existing = questionary.confirm(
                        "Keep existing Gmail setup?",
                        default=True
                    ).ask()
                    if use_existing:
                        return True
                else:
                    console.print("  [red]✗ Connection test: FAILED[/red]")
                    console.print("  [yellow]We'll need to reconfigure Gmail[/yellow]")
            except Exception as e:
                console.print(f"  [red]✗ Test failed: {e}[/red]")
                
        if not creds_path.exists():
            console.print(
                "\n[yellow]📋 To set up Gmail:[/yellow]\n"
                "1. Go to https://console.cloud.google.com/\n"
                "2. Create a new project or select existing\n"
                "3. Enable Gmail API\n"
                "4. Create OAuth 2.0 credentials\n"
                "5. Download as 'credentials.json'\n"
                f"6. Place in: {creds_path}\n"
            )
            
            has_creds = questionary.confirm(
                "Have you downloaded credentials.json?",
                default=False
            ).ask()
            
            if has_creds:
                creds_content = questionary.text(
                    "Paste the contents of credentials.json:"
                ).ask()
                
                result = self.service.setup_gmail_auth(creds_content)
                if result["success"]:
                    console.print("✅ Credentials saved")
                else:
                    console.print(f"[red]❌ Invalid JSON: {result.get('error')}[/red]")
                    return False
            else:
                return False
                
        # Run authentication flow
        console.print("Opening browser for Gmail authentication...")
        result = self.service.setup_gmail_auth()
        
        if result["success"]:
            console.print("✅ Gmail authenticated successfully")
            return True
        else:
            console.print(f"[red]❌ Authentication failed: {result.get('error')}[/red]")
            return False
            
    def configure_senders(self) -> bool:
        """Configure email sender filters"""
        console.print("\n[bold]Sender Configuration[/bold]")
        
        filter_type = questionary.select(
            "How do you want to filter emails?",
            choices=[
                "All emails (no filter)",
                "Specific senders only",
                "Use existing configuration"
            ]
        ).ask()
        
        if filter_type == "Use existing configuration":
            console.print("✅ Using existing sender configuration")
            return True
            
        if filter_type == "Specific senders only":
            console.print("\n[cyan]Enter email addresses to sync (one per line, empty line to finish):[/cyan]")
            senders = []
            while True:
                sender = input("> ").strip()
                if not sender:
                    break
                senders.append(sender)
                console.print(f"  Added: {sender}")
                
            if senders:
                success = self.service.configure_gmail_senders(filter_type, senders)
                if success:
                    console.print(f"✅ Configured {len(senders)} senders")
                else:
                    console.print("[red]❌ Failed to configure senders[/red]")
                return success
        else:
            success = self.service.configure_gmail_senders(filter_type)
            if success:
                console.print("✅ Configured to sync all emails")
            else:
                console.print("[red]❌ Failed to configure senders[/red]")
            return success
        
    def setup_qdrant(self) -> Optional[bool]:
        """Optionally set up Qdrant vector database"""
        console.print("\n[bold]Vector Search Setup (Optional)[/bold]")
        
        install_qdrant = questionary.confirm(
            "Install Qdrant for semantic search? (optional)",
            default=False
        ).ask()
        
        if not install_qdrant:
            console.print("⏭️  Skipping Qdrant (keyword search will be used)")
            return None
            
        system = questionary.select(
            "Select your system:",
            choices=["macOS (Apple Silicon)", "macOS (Intel)", "Linux", "Windows", "Other"]
        ).ask()
        
        if system == "Other":
            console.print("\n[yellow]Manual installation required:[/yellow]")
            console.print("Visit: https://qdrant.tech/documentation/quick-start/")
            return None

        success = self.service.install_qdrant(system)
        if success:
            console.print("✅ Qdrant is working!")
            return True
        else:
            console.print("[yellow]⚠️  Qdrant installed but not responding or failed to install[/yellow]")
            return False
            
    def initialize_database(self) -> bool:
        """Initialize the database"""
        console.print("\n[bold]Database Initialization[/bold]")
        
        try:
            stats = self.service.initialize_database()
            
            if stats["total_content"] > 0:
                console.print(f"✅ Database exists with {stats['total_content']} items")
            else:
                console.print("✅ Database initialized (empty)")
            return True
        except Exception as e:
            console.print(f"[red]❌ Database error: {e}[/red]")
            return False
            
    def setup_mcp_servers(self) -> bool:
        """Optionally configure MCP servers"""
        console.print("\n[bold]MCP Server Configuration (Optional)[/bold]")
        
        setup_mcp = questionary.confirm(
            "Configure MCP servers for Claude Desktop?",
            default=False
        ).ask()
        
        if not setup_mcp:
            console.print("⏭️  Skipping MCP configuration")
            return True
            
        success = self.service.setup_mcp_servers(self.project_root)
        
        if success:
            console.print("✅ MCP servers configured")
            console.print("\n[cyan]To use with Claude Desktop:[/cyan]")
            console.print(f"1. Copy {self.project_root / ".claude" / "mcp.json"} to Claude Desktop config directory")
            console.print("2. Restart Claude Desktop")
            return True
        else:
            console.print("[red]❌ Failed to configure MCP servers[/red]")
            return False
        
    def run_first_sync(self) -> bool:
        """Run the first email sync"""
        console.print("\n[bold]First Sync[/bold]")
        
        run_sync = questionary.confirm(
            "Run your first email sync now?",
            default=True
        ).ask()
        
        if not run_sync:
            console.print("⏭️  Skipping first sync")
            return True
            
        console.print("\n[cyan]Starting email sync...[/cyan]")
        
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console,
        ) as progress:
            task = progress.add_task("Syncing emails...", total=None)
            
            result = self.service.run_first_sync()
            
            if result["success"]:
                progress.update(task, description=f"✅ Synced {result['processed']} emails")
                console.print(f"\n[green]Success![/green]")
                console.print(f"• New emails: {result['processed']}")
                console.print(f"• Duplicates: {result.get('duplicates', 0)}")
                return True
            else:
                progress.update(task, description="❌ Sync failed")
                console.print(f"[red]Error: {result.get('error')}[/red]")
                return False
                
    def create_shortcuts(self):
        """Create convenient command shortcuts"""
        console.print("\n[bold]Creating Shortcuts[/bold]")
        
        alias_path = self.service.create_shortcuts(self.project_root)
        
        console.print("✅ Created setup_aliases.sh")
        console.print("\n[cyan]To install shortcuts:[/cyan]")
        console.print(f"cat {alias_path} >> ~/.bashrc  # For bash")
        console.print(f"cat {alias_path} >> ~/.zshrc   # For zsh")
        console.print("source ~/.bashrc  # or ~/.zshrc")
        
    def save_configuration(self):
        """Save setup configuration for future reference"""
        config_path = self.service.save_configuration(self.config, self.project_root)
        
        console.print(f"✅ Configuration saved to {config_path}")