#!/usr/bin/env python3
"""
Email Sync System - Interactive Setup Wizard
Guides users through initial configuration and setup
"""

import os
import sys
import json
import subprocess
from pathlib import Path
from typing import Dict, Any, Optional
import questionary
from rich.console import Console
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn

# Add project root to path
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

console = Console()

class SetupWizard:
    """Interactive setup wizard for Email Sync System"""
    
    def __init__(self):
        self.config = {}
        self.project_root = Path(__file__).parent.parent.parent
        
    def welcome(self):
        """Display welcome message"""
        console.print("\n" + "="*70)
        console.print(Panel.fit(
            "[bold cyan]üìß Email Sync System Setup Wizard[/bold cyan]\n\n"
            "[yellow]Welcome to your personal email intelligence system![/yellow]\n\n"
            "This wizard will guide you through:\n"
            "‚Ä¢ [green]Gmail API setup[/green] - Connect to your email\n"
            "‚Ä¢ [blue]Smart filtering[/blue] - Choose which emails to sync\n"
            "‚Ä¢ [purple]Vector search[/purple] - Optional semantic search (Qdrant)\n"
            "‚Ä¢ [orange1]AI integration[/orange1] - MCP servers for Claude Desktop\n"
            "‚Ä¢ [red]First sync[/red] - Test with real data\n\n"
            "[dim]Estimated time: 5-10 minutes[/dim]\n"
            "[dim]You can stop and resume anytime[/dim]",
            title="üöÄ Email Sync Setup",
            border_style="cyan",
            padding=(1, 2)
        ))
        
        # Show system info
        console.print("\n[bold]System Information:[/bold]")
        console.print(f"  Python: {sys.version.split()[0]}")
        console.print(f"  Platform: {sys.platform}")
        console.print(f"  Project: {self.project_root}")
        
        ready = questionary.confirm(
            "\nüéØ Ready to get started?",
            default=True
        ).ask()
        
        if not ready:
            console.print("[yellow]No problem! You can run this wizard anytime with:[/yellow]")
            console.print("  [cyan]tools/scripts/setup_wizard[/cyan]")
            sys.exit(0)
        
    def check_python_version(self) -> bool:
        """Check if Python version is compatible"""
        version = sys.version_info
        if version.major == 3 and version.minor >= 9:
            console.print(f"‚úÖ Python {version.major}.{version.minor} detected")
            return True
        else:
            console.print(f"[red]‚ùå Python 3.9+ required (found {version.major}.{version.minor})[/red]")
            return False
            
    def install_dependencies(self) -> bool:
        """Install Python dependencies"""
        console.print("\n[bold]Installing Dependencies[/bold]")
        
        if not Path("requirements.txt").exists():
            console.print("[red]‚ùå requirements.txt not found[/red]")
            return False
            
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console,
        ) as progress:
            task = progress.add_task("Installing packages...", total=None)
            
            result = subprocess.run(
                [sys.executable, "-m", "pip", "install", "-r", "requirements.txt"],
                capture_output=True,
                text=True
            )
            
            if result.returncode == 0:
                progress.update(task, description="‚úÖ Dependencies installed")
                return True
            else:
                console.print(f"[red]‚ùå Installation failed: {result.stderr}[/red]")
                return False
                
    def setup_gmail(self) -> bool:
        """Set up Gmail authentication"""
        console.print("\n" + "="*50)
        console.print("[bold cyan]üìß Step 1: Gmail Setup[/bold cyan]")
        console.print("We need to connect to your Gmail account to sync emails.")
        
        # Check for existing credentials
        creds_path = self.project_root / "gmail" / "credentials.json"
        token_path = self.project_root / "gmail" / "token.json"
        
        if token_path.exists():
            console.print("\n[green]‚úÖ Gmail is already configured![/green]")
            
            # Test the connection
            try:
                from gmail.oauth import GmailAuth
                auth = GmailAuth()
                result = auth.get_credentials()
                if result["success"]:
                    console.print("  [green]‚úì Connection test: SUCCESS[/green]")
                    
                    use_existing = questionary.confirm(
                        "Keep existing Gmail setup?",
                        default=True
                    ).ask()
                    if use_existing:
                        return True
                else:
                    console.print("  [red]‚úó Connection test: FAILED[/red]")
                    console.print("  [yellow]We'll need to reconfigure Gmail[/yellow]")
            except Exception as e:
                console.print(f"  [red]‚úó Test failed: {e}[/red]")
                
        if not creds_path.exists():
            console.print(
                "\n[yellow]üìã To set up Gmail:[/yellow]\n"
                "1. Go to https://console.cloud.google.com/\n"
                "2. Create a new project or select existing\n"
                "3. Enable Gmail API\n"
                "4. Create OAuth 2.0 credentials\n"
                "5. Download as 'credentials.json'\n"
                f"6. Place in: {creds_path}\n"
            )
            
            has_creds = questionary.confirm(
                "Have you downloaded credentials.json?",
                default=False
            ).ask()
            
            if has_creds:
                creds_content = questionary.text(
                    "Paste the contents of credentials.json:"
                ).ask()
                
                try:
                    # Validate JSON
                    json.loads(creds_content)
                    creds_path.parent.mkdir(exist_ok=True)
                    creds_path.write_text(creds_content)
                    console.print("‚úÖ Credentials saved")
                except json.JSONDecodeError:
                    console.print("[red]‚ùå Invalid JSON[/red]")
                    return False
            else:
                return False
                
        # Run authentication flow
        console.print("Opening browser for Gmail authentication...")
        from gmail.oauth import GmailAuth
        auth = GmailAuth()
        result = auth.get_credentials()
        
        if result["success"]:
            console.print("‚úÖ Gmail authenticated successfully")
            return True
        else:
            console.print(f"[red]‚ùå Authentication failed: {result.get('error')}[/red]")
            return False
            
    def configure_senders(self) -> bool:
        """Configure email sender filters"""
        console.print("\n[bold]Sender Configuration[/bold]")
        
        config_path = self.project_root / "gmail" / "config.py"
        
        filter_type = questionary.select(
            "How do you want to filter emails?",
            choices=[
                "All emails (no filter)",
                "Specific senders only",
                "Use existing configuration"
            ]
        ).ask()
        
        if filter_type == "Use existing configuration":
            console.print("‚úÖ Using existing sender configuration")
            return True
            
        if filter_type == "Specific senders only":
            console.print("\n[cyan]Enter email addresses to sync (one per line, empty line to finish):[/cyan]")
            senders = []
            while True:
                sender = input("> ").strip()
                if not sender:
                    break
                senders.append(sender)
                console.print(f"  Added: {sender}")
                
            if senders:
                # Update config.py
                config_content = f'''"""Gmail configuration for Email Sync System"""

class GmailConfig:
    """Gmail service configuration"""
    
    def __init__(self):
        self.max_results = 500
        self.use_filters = True
        self.preferred_senders = {senders!r}
        
    def build_query(self) -> str:
        """Build Gmail search query from configured senders"""
        if not self.use_filters or not self.preferred_senders:
            return ""
            
        sender_queries = [f"from:{sender}" for sender in self.preferred_senders]
        return f"({' OR '.join(sender_queries)})"
'''
                config_path.write_text(config_content)
                console.print(f"‚úÖ Configured {len(senders)} senders")
        else:
            # No filter
            config_content = '''"""Gmail configuration for Email Sync System"""

class GmailConfig:
    """Gmail service configuration"""
    
    def __init__(self):
        self.max_results = 500
        self.use_filters = False
        self.preferred_senders = []
        
    def build_query(self) -> str:
        """Build Gmail search query from configured senders"""
        return ""
'''
            config_path.write_text(config_content)
            console.print("‚úÖ Configured to sync all emails")
            
        return True
        
    def setup_qdrant(self) -> Optional[bool]:
        """Optionally set up Qdrant vector database"""
        console.print("\n[bold]Vector Search Setup (Optional)[/bold]")
        
        install_qdrant = questionary.confirm(
            "Install Qdrant for semantic search? (optional)",
            default=False
        ).ask()
        
        if not install_qdrant:
            console.print("‚è≠Ô∏è  Skipping Qdrant (keyword search will be used)")
            return None
            
        system = questionary.select(
            "Select your system:",
            choices=["macOS (Apple Silicon)", "macOS (Intel)", "Linux", "Windows", "Other"]
        ).ask()
        
        install_commands = {
            "macOS (Apple Silicon)": [
                "curl -L -o /tmp/qdrant.tar.gz https://github.com/qdrant/qdrant/releases/download/v1.12.5/qdrant-aarch64-apple-darwin.tar.gz",
                "tar -xzf /tmp/qdrant.tar.gz -C /tmp",
                "mkdir -p ~/bin && cp /tmp/qdrant ~/bin/qdrant",
                "chmod +x ~/bin/qdrant"
            ],
            "macOS (Intel)": [
                "curl -L -o /tmp/qdrant.tar.gz https://github.com/qdrant/qdrant/releases/download/v1.12.5/qdrant-x86_64-apple-darwin.tar.gz",
                "tar -xzf /tmp/qdrant.tar.gz -C /tmp",
                "mkdir -p ~/bin && cp /tmp/qdrant ~/bin/qdrant",
                "chmod +x ~/bin/qdrant"
            ],
            "Linux": [
                "curl -L -o /tmp/qdrant.tar.gz https://github.com/qdrant/qdrant/releases/download/v1.12.5/qdrant-x86_64-unknown-linux-gnu.tar.gz",
                "tar -xzf /tmp/qdrant.tar.gz -C /tmp",
                "mkdir -p ~/bin && cp /tmp/qdrant ~/bin/qdrant",
                "chmod +x ~/bin/qdrant"
            ]
        }
        
        if system in install_commands:
            console.print(f"\n[cyan]Installing Qdrant for {system}...[/cyan]")
            
            for cmd in install_commands[system]:
                console.print(f"  Running: {cmd[:50]}...")
                result = subprocess.run(cmd, shell=True, capture_output=True)
                if result.returncode != 0:
                    console.print(f"[red]‚ùå Command failed[/red]")
                    return False
                    
            console.print("‚úÖ Qdrant installed to ~/bin/qdrant")
            
            # Test Qdrant
            console.print("\nTesting Qdrant...")
            test_process = subprocess.Popen(
                [str(Path.home() / "bin" / "qdrant")],
                env={**os.environ, "QDRANT__STORAGE__PATH": "./qdrant_data"},
                stdout=subprocess.DEVNULL,
                stderr=subprocess.DEVNULL
            )
            
            import time
            time.sleep(3)
            
            try:
                import requests
                response = requests.get("http://localhost:6333/readiness", timeout=2)
                if response.status_code == 200:
                    console.print("‚úÖ Qdrant is working!")
                    test_process.terminate()
                    return True
            except:
                pass
                
            test_process.terminate()
            console.print("[yellow]‚ö†Ô∏è  Qdrant installed but not responding[/yellow]")
            return False
        else:
            console.print("\n[yellow]Manual installation required:[/yellow]")
            console.print("Visit: https://qdrant.tech/documentation/quick-start/")
            return None
            
    def initialize_database(self) -> bool:
        """Initialize the database"""
        console.print("\n[bold]Database Initialization[/bold]")
        
        from shared.simple_db import SimpleDB
        
        try:
            db = SimpleDB()
            stats = db.get_content_stats()
            
            if stats["total_content"] > 0:
                console.print(f"‚úÖ Database exists with {stats['total_content']} items")
            else:
                console.print("‚úÖ Database initialized (empty)")
            return True
        except Exception as e:
            console.print(f"[red]‚ùå Database error: {e}[/red]")
            return False
            
    def setup_mcp_servers(self) -> bool:
        """Optionally configure MCP servers"""
        console.print("\n[bold]MCP Server Configuration (Optional)[/bold]")
        
        setup_mcp = questionary.confirm(
            "Configure MCP servers for Claude Desktop?",
            default=False
        ).ask()
        
        if not setup_mcp:
            console.print("‚è≠Ô∏è  Skipping MCP configuration")
            return True
            
        mcp_config = {
            "mcpServers": {
                "email-sync": {
                    "command": "python",
                    "args": ["-m", "infrastructure.mcp_servers.legal_intelligence_server"],
                    "cwd": str(self.project_root)
                },
                "search-intelligence": {
                    "command": "python",
                    "args": ["-m", "infrastructure.mcp_servers.search_intelligence_server"],
                    "cwd": str(self.project_root)
                }
            }
        }
        
        config_path = self.project_root / ".mcp.json"
        config_path.write_text(json.dumps(mcp_config, indent=2))
        
        console.print("‚úÖ MCP servers configured")
        console.print("\n[cyan]To use with Claude Desktop:[/cyan]")
        console.print(f"1. Copy {config_path} to Claude Desktop config directory")
        console.print("2. Restart Claude Desktop")
        
        return True
        
    def run_first_sync(self) -> bool:
        """Run the first email sync"""
        console.print("\n[bold]First Sync[/bold]")
        
        run_sync = questionary.confirm(
            "Run your first email sync now?",
            default=True
        ).ask()
        
        if not run_sync:
            console.print("‚è≠Ô∏è  Skipping first sync")
            return True
            
        console.print("\n[cyan]Starting email sync...[/cyan]")
        
        from gmail.main import GmailService
        service = GmailService()
        
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console,
        ) as progress:
            task = progress.add_task("Syncing emails...", total=None)
            
            result = service.sync_emails(max_results=50, batch_mode=True)
            
            if result["success"]:
                progress.update(task, description=f"‚úÖ Synced {result['processed']} emails")
                console.print(f"\n[green]Success![/green]")
                console.print(f"‚Ä¢ New emails: {result['processed']}")
                console.print(f"‚Ä¢ Duplicates: {result.get('duplicates', 0)}")
                return True
            else:
                progress.update(task, description="‚ùå Sync failed")
                console.print(f"[red]Error: {result.get('error')}[/red]")
                return False
                
    def create_shortcuts(self):
        """Create convenient command shortcuts"""
        console.print("\n[bold]Creating Shortcuts[/bold]")
        
        # Create aliases file
        aliases = """# Email Sync System Shortcuts
# Add to your ~/.bashrc or ~/.zshrc

alias vsearch='~/Projects/Email\\ Sync/tools/scripts/vsearch'
alias vsync='python3 ~/Projects/Email\\ Sync/tools/scripts/run_full_system'
alias vsetup='python3 ~/Projects/Email\\ Sync/tools/scripts/setup_wizard'

# Quick commands
alias vsearch-maintenance='vsearch search maintenance'
alias vsearch-legal='vsearch legal process'
alias vsearch-info='vsearch info'
"""
        
        alias_path = self.project_root / "setup_aliases.sh"
        alias_path.write_text(aliases)
        
        console.print("‚úÖ Created setup_aliases.sh")
        console.print("\n[cyan]To install shortcuts:[/cyan]")
        console.print(f"cat {alias_path} >> ~/.bashrc  # For bash")
        console.print(f"cat {alias_path} >> ~/.zshrc   # For zsh")
        console.print("source ~/.bashrc  # or ~/.zshrc")
        
    def save_configuration(self):
        """Save setup configuration for future reference"""
        config_path = self.project_root / ".setup_complete"
        config_path.write_text(json.dumps({
            "setup_date": str(Path.ctime(Path.cwd())),
            "python_version": f"{sys.version_info.major}.{sys.version_info.minor}",
            "features": self.config
        }, indent=2))
        
    def run(self):
        """Run the complete setup wizard"""
        self.welcome()
        
        # Check Python version
        if not self.check_python_version():
            return False
            
        # Install dependencies
        if not self.install_dependencies():
            return False
            
        # Gmail setup
        if not self.setup_gmail():
            console.print("\n[red]‚ö†Ô∏è  Gmail setup is required[/red]")
            return False
            
        # Configure senders
        self.configure_senders()
        
        # Database
        if not self.initialize_database():
            return False
            
        # Optional: Qdrant
        qdrant_result = self.setup_qdrant()
        self.config["qdrant"] = qdrant_result
        
        # Optional: MCP
        self.setup_mcp_servers()
        
        # First sync
        self.run_first_sync()
        
        # Create shortcuts
        self.create_shortcuts()
        
        # Save configuration
        self.save_configuration()
        
        # Success!
        console.print("\n" + "="*50)
        console.print(Panel.fit(
            "[bold green]üéâ Setup Complete![/bold green]\n\n"
            "Your Email Sync System is ready to use!\n\n"
            "[cyan]Quick Start Commands:[/cyan]\n"
            "‚Ä¢ Search: vsearch 'your query'\n"
            "‚Ä¢ Sync: tools/scripts/run_full_system\n"
            "‚Ä¢ Info: vsearch info\n\n"
            "[yellow]Next Steps:[/yellow]\n"
            "1. Review gmail/config.py for sender settings\n"
            "2. Run full sync: tools/scripts/run_full_system\n"
            "3. Try searching: vsearch search 'test'",
            title="Success",
            border_style="green"
        ))
        
        return True

def main():
    """Main entry point"""
    try:
        wizard = SetupWizard()
        success = wizard.run()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        console.print("\n[yellow]Setup cancelled[/yellow]")
        sys.exit(130)
    except Exception as e:
        console.print(f"\n[red]Setup failed: {e}[/red]")
        sys.exit(1)

if __name__ == "__main__":
    main()