#!/usr/bin/env python3
"""
Email Sync System - First Run Guide & Tutorial
Interactive guide for new users with validation and troubleshooting
"""

import os
import sys
import json
import time
from pathlib import Path
from datetime import datetime
from typing import Dict, List

import questionary
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.progress import Progress, SpinnerColumn, TextColumn, BarColumn, TaskProgressColumn
from rich.live import Live
from rich.layout import Layout
from rich.text import Text

# Add project root to path
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

console = Console()

class FirstRunGuide:
    """Interactive first-run guide with validation and troubleshooting"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent.parent.parent
        self.progress_file = self.project_root / ".first_run_progress.json"
        self.progress = self._load_progress()
        
    def _load_progress(self) -> Dict:
        """Load previous progress"""
        if self.progress_file.exists():
            try:
                with open(self.progress_file) as f:
                    return json.load(f)
            except:
                pass
        return {
            "setup_complete": False,
            "first_sync_complete": False,
            "tutorial_complete": False,
            "last_step": 0
        }
        
    def _save_progress(self):
        """Save current progress"""
        self.progress["last_updated"] = datetime.now().isoformat()
        with open(self.progress_file, 'w') as f:
            json.dump(self.progress, f, indent=2)
            
    def welcome_back_user(self) -> bool:
        """Handle returning users"""
        if self.progress.get("tutorial_complete"):
            console.print(Panel.fit(
                "[bold green]Welcome back![/bold green]\n\n"
                "Your Email Sync System is already configured.\n\n"
                "[cyan]Quick Commands:[/cyan]\n"
                "‚Ä¢ Full sync: [yellow]tools/scripts/run_full_system[/yellow]\n"
                "‚Ä¢ Search: [yellow]tools/scripts/vsearch search 'query'[/yellow]\n"
                "‚Ä¢ System info: [yellow]tools/scripts/vsearch info[/yellow]",
                title="üëã Welcome Back",
                border_style="green"
            ))
            
            action = questionary.select(
                "What would you like to do?",
                choices=[
                    "Run a quick sync",
                    "Search existing emails", 
                    "Show system status",
                    "Re-run tutorial",
                    "Exit"
                ]
            ).ask()
            
            if action == "Run a quick sync":
                self.run_sync_demo()
                return True
            elif action == "Search existing emails":
                self.search_demo()
                return True
            elif action == "Show system status":
                self.system_status()
                return True
            elif action == "Re-run tutorial":
                self.progress["tutorial_complete"] = False
                self._save_progress()
                return False
            else:
                return True
                
        return False
        
    def introduction(self):
        """Introduction for new users"""
        console.print("\n" + "="*70)
        console.print(Panel.fit(
            "[bold blue]üéØ Email Sync System - First Run Guide[/bold blue]\n\n"
            "[yellow]Congratulations on setting up your personal email intelligence system![/yellow]\n\n"
            "This guide will:\n"
            "‚Ä¢ [green]Validate your setup[/green]\n"
            "‚Ä¢ [blue]Run your first sync[/blue]\n"
            "‚Ä¢ [purple]Show you key features[/purple]\n"
            "‚Ä¢ [orange1]Demonstrate search capabilities[/orange1]\n"
            "‚Ä¢ [red]Provide troubleshooting tips[/red]\n\n"
            "[dim]Time: ~10 minutes[/dim]",
            title="üöÄ Let's Get Started!",
            border_style="blue",
            padding=(1, 2)
        ))
        
    def validate_setup(self) -> Dict[str, bool]:
        """Comprehensive setup validation"""
        console.print("\n[bold cyan]üîç Step 1: Validating Your Setup[/bold cyan]")
        
        checks = {
            "python_version": False,
            "dependencies": False,
            "gmail_auth": False,
            "database": False,
            "qdrant": False,
            "mcp_servers": False
        }
        
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            BarColumn(),
            TaskProgressColumn(),
            console=console,
        ) as progress:
            
            # Python version
            task = progress.add_task("Checking Python version...", total=100)
            time.sleep(0.5)
            version = sys.version_info
            if version.major == 3 and version.minor >= 9:
                checks["python_version"] = True
                progress.update(task, completed=100, description=f"‚úÖ Python {version.major}.{version.minor}")
            else:
                progress.update(task, completed=100, description=f"‚ùå Python {version.major}.{version.minor} (need 3.9+)")
                
            # Dependencies
            task = progress.add_task("Checking dependencies...", total=100)
            time.sleep(0.5)
            try:
                import loguru, numpy, torch, transformers
                checks["dependencies"] = True
                progress.update(task, completed=100, description="‚úÖ All dependencies installed")
            except ImportError as e:
                progress.update(task, completed=100, description=f"‚ùå Missing: {e.name}")
                
            # Gmail authentication
            task = progress.add_task("Testing Gmail connection...", total=100)
            try:
                from gmail.oauth import GmailAuth
                auth = GmailAuth()
                result = auth.get_credentials()
                if result["success"]:
                    checks["gmail_auth"] = True
                    progress.update(task, completed=100, description="‚úÖ Gmail connected")
                else:
                    progress.update(task, completed=100, description="‚ùå Gmail auth failed")
            except Exception as e:
                progress.update(task, completed=100, description="‚ùå Gmail error")
                
            # Database
            task = progress.add_task("Checking database...", total=100)
            try:
                from shared.simple_db import SimpleDB
                db = SimpleDB()
                stats = db.get_content_stats()
                checks["database"] = True
                total = stats.get("total_content", 0)
                progress.update(task, completed=100, description=f"‚úÖ Database ({total} items)")
            except Exception:
                progress.update(task, completed=100, description="‚ùå Database error")
                
            # Qdrant (optional)
            task = progress.add_task("Checking Qdrant...", total=100)
            try:
                import requests
                response = requests.get("http://localhost:6333/readiness", timeout=2)
                if response.status_code == 200:
                    checks["qdrant"] = True
                    progress.update(task, completed=100, description="‚úÖ Qdrant running")
                else:
                    progress.update(task, completed=100, description="‚ö†Ô∏è  Qdrant not running (optional)")
            except:
                progress.update(task, completed=100, description="‚ö†Ô∏è  Qdrant not running (optional)")
                
            # MCP servers (optional)
            task = progress.add_task("Checking MCP config...", total=100)
            mcp_config = self.project_root / ".mcp.json"
            if mcp_config.exists():
                checks["mcp_servers"] = True
                progress.update(task, completed=100, description="‚úÖ MCP configured")
            else:
                progress.update(task, completed=100, description="‚ö†Ô∏è  MCP not configured (optional)")
                
        return checks
        
    def show_validation_results(self, checks: Dict[str, bool]):
        """Show validation results with recommendations"""
        console.print("\n[bold]Validation Results:[/bold]")
        
        table = Table(title="System Status")
        table.add_column("Component", style="cyan")
        table.add_column("Status", style="green")
        table.add_column("Required", style="yellow")
        table.add_column("Action Needed", style="red")
        
        requirements = {
            "python_version": ("Python 3.9+", True, "Update Python"),
            "dependencies": ("Python packages", True, "Run: pip install -r requirements.txt"),
            "gmail_auth": ("Gmail connection", True, "Run setup wizard"),
            "database": ("SQLite database", True, "Check file permissions"),
            "qdrant": ("Vector search", False, "Install Qdrant for semantic search"),
            "mcp_servers": ("Claude integration", False, "Configure MCP for Claude Desktop")
        }
        
        all_required_pass = True
        for check, passed in checks.items():
            desc, required, action = requirements[check]
            status = "‚úÖ Working" if passed else ("‚ùå Missing" if required else "‚ö†Ô∏è  Optional")
            req_text = "Required" if required else "Optional"
            action_text = "" if passed else action
            
            if required and not passed:
                all_required_pass = False
                
            table.add_row(desc, status, req_text, action_text)
            
        console.print(table)
        
        if all_required_pass:
            console.print("\n[bold green]üéâ All required components are working![/bold green]")
            return True
        else:
            console.print("\n[bold red]‚ö†Ô∏è  Some required components need attention[/bold red]")
            
            fix_now = questionary.confirm(
                "Would you like help fixing these issues?",
                default=True
            ).ask()
            
            if fix_now:
                self.show_troubleshooting_guide()
                return False
            else:
                console.print("\n[yellow]You can continue, but some features may not work.[/yellow]")
                return questionary.confirm("Continue anyway?", default=False).ask()
                
    def show_troubleshooting_guide(self):
        """Interactive troubleshooting guide"""
        console.print("\n[bold cyan]üîß Troubleshooting Guide[/bold cyan]")
        
        issue = questionary.select(
            "What needs fixing?",
            choices=[
                "Gmail authentication",
                "Missing dependencies", 
                "Database issues",
                "Qdrant setup",
                "MCP configuration",
                "Other"
            ]
        ).ask()
        
        if issue == "Gmail authentication":
            console.print(Panel.fit(
                "[bold]Gmail Setup Issues[/bold]\n\n"
                "1. [yellow]Check credentials.json[/yellow]\n"
                "   ‚Ä¢ File location: gmail/credentials.json\n"
                "   ‚Ä¢ Download from Google Cloud Console\n"
                "   ‚Ä¢ Enable Gmail API\n\n"
                "2. [yellow]Run authentication[/yellow]\n"
                "   ‚Ä¢ Command: tools/scripts/setup_wizard\n"
                "   ‚Ä¢ Follow OAuth flow in browser\n\n"
                "3. [yellow]Check permissions[/yellow]\n"
                "   ‚Ä¢ Gmail API must be enabled\n"
                "   ‚Ä¢ OAuth consent screen configured",
                title="üîß Gmail Fix",
                border_style="yellow"
            ))
            
        elif issue == "Missing dependencies":
            console.print(Panel.fit(
                "[bold]Dependency Issues[/bold]\n\n"
                "[yellow]Quick fix:[/yellow]\n"
                "pip install -r requirements.txt\n\n"
                "[yellow]If that fails:[/yellow]\n"
                "pip install --upgrade pip\n"
                "pip install torch transformers loguru numpy\n\n"
                "[yellow]For Apple Silicon Macs:[/yellow]\n"
                "pip install torch --index-url https://download.pytorch.org/whl/cpu",
                title="üîß Dependencies Fix",
                border_style="yellow"
            ))
            
        # Add more troubleshooting scenarios...
        
    def first_sync_tutorial(self) -> bool:
        """Guide user through their first sync"""
        console.print("\n" + "="*50)
        console.print("[bold cyan]üì• Step 2: Your First Email Sync[/bold cyan]")
        console.print("Let's sync some emails and see your system in action!")
        
        # Check if emails already exist
        try:
            from shared.simple_db import SimpleDB
            db = SimpleDB()
            stats = db.get_content_stats()
            existing_emails = stats.get("total_emails", 0)
            
            if existing_emails > 0:
                console.print(f"\n[green]Great! You already have {existing_emails} emails synced.[/green]")
                skip_sync = questionary.confirm(
                    "Skip the sync demo and go to search tutorial?",
                    default=True
                ).ask()
                if skip_sync:
                    return True
        except:
            pass
            
        console.print("\n[yellow]We'll sync a small batch of emails first (20 emails max).[/yellow]")
        console.print("[dim]This is just a test - you can sync more later.[/dim]")
        
        proceed = questionary.confirm(
            "\nüöÄ Start the sync?",
            default=True
        ).ask()
        
        if not proceed:
            return False
            
        # Run the sync with progress
        console.print("\n[cyan]Starting sync...[/cyan]")
        
        try:
            from gmail.main import GmailService
            
            with Progress(
                SpinnerColumn(),
                TextColumn("[progress.description]{task.description}"),
                console=console,
            ) as progress:
                task = progress.add_task("Connecting to Gmail...", total=None)
                
                service = GmailService()
                progress.update(task, description="Syncing emails...")
                
                result = service.sync_emails(max_results=20, batch_mode=True)
                
                if result["success"]:
                    processed = result.get("processed", 0)
                    duplicates = result.get("duplicates", 0)
                    
                    progress.update(task, description=f"‚úÖ Sync complete!")
                    
                    console.print("\n[bold green]üéâ First sync successful![/bold green]")
                    console.print(f"  ‚Ä¢ New emails: {processed}")
                    console.print(f"  ‚Ä¢ Duplicates skipped: {duplicates}")
                    
                    if processed == 0 and duplicates > 0:
                        console.print("\n[yellow]All emails were duplicates - that's normal if you've synced before![/yellow]")
                    elif processed > 0:
                        console.print(f"\n[cyan]Let's explore your {processed} new emails...[/cyan]")
                        
                    self.progress["first_sync_complete"] = True
                    self._save_progress()
                    return True
                    
                else:
                    error = result.get("error", "Unknown error")
                    progress.update(task, description=f"‚ùå Sync failed: {error}")
                    
                    console.print(f"\n[red]Sync failed: {error}[/red]")
                    self.sync_troubleshooting(error)
                    return False
                    
        except Exception as e:
            console.print(f"\n[red]Error during sync: {e}[/red]")
            return False
            
    def sync_troubleshooting(self, error: str):
        """Help troubleshoot sync issues"""
        console.print("\n[bold yellow]üîß Sync Troubleshooting[/bold yellow]")
        
        if "authentication" in error.lower() or "credentials" in error.lower():
            console.print("This looks like an authentication issue.")
            console.print("Try running: [cyan]tools/scripts/setup_wizard[/cyan]")
        elif "network" in error.lower() or "timeout" in error.lower():
            console.print("This looks like a network issue.")
            console.print("Check your internet connection and try again.")
        elif "quota" in error.lower() or "limit" in error.lower():
            console.print("Gmail API quota exceeded.")
            console.print("Wait a few minutes and try again with fewer emails.")
        else:
            console.print("Unexpected error occurred.")
            console.print("Check the logs in logs/ directory for more details.")
            
    def search_tutorial(self):
        """Interactive search tutorial"""
        console.print("\n" + "="*50)
        console.print("[bold cyan]üîç Step 3: Search Tutorial[/bold cyan]")
        console.print("Now let's learn how to search your emails!")
        
        # Check if we have content to search
        try:
            from shared.simple_db import SimpleDB
            db = SimpleDB()
            stats = db.get_content_stats()
            total_content = stats.get("total_content", 0)
            
            if total_content == 0:
                console.print("\n[yellow]No content found to search.[/yellow]")
                console.print("Let's run a sync first!")
                if self.first_sync_tutorial():
                    self.search_tutorial()  # Recursive call after sync
                return
                
            console.print(f"\n[green]Great! You have {total_content} items to search.[/green]")
            
        except Exception as e:
            console.print(f"\n[red]Error checking content: {e}[/red]")
            return
            
        # Demonstrate different search methods
        searches = [
            ("maintenance", "Find emails about maintenance requests"),
            ("contract", "Search for contract-related content"),
            ("payment", "Find payment-related emails")
        ]
        
        console.print("\n[yellow]Let's try some example searches:[/yellow]")
        
        for query, description in searches:
            console.print(f"\n[cyan]üîç Searching for: '{query}'[/cyan]")
            console.print(f"[dim]{description}[/dim]")
            
            try:
                import subprocess
                result = subprocess.run(
                    [sys.executable, "tools/scripts/vsearch", "search", query, "--limit", "3"],
                    cwd=self.project_root,
                    capture_output=True,
                    text=True,
                    timeout=30
                )
                
                if result.returncode == 0:
                    # Show abbreviated results
                    lines = result.stdout.split('\n')
                    relevant_lines = [line for line in lines if 'Result' in line or 'Found' in line or 'Title:' in line][:5]
                    for line in relevant_lines:
                        console.print(f"  {line}")
                else:
                    console.print(f"  [red]Search failed[/red]")
                    
            except Exception as e:
                console.print(f"  [red]Error: {e}[/red]")
                
            time.sleep(1)
            
        # Interactive search
        console.print("\n[bold]Now it's your turn![/bold]")
        custom_query = questionary.text(
            "üîç Enter a search term (or press Enter to skip):"
        ).ask()
        
        if custom_query and custom_query.strip():
            console.print(f"\n[cyan]Searching for: '{custom_query}'[/cyan]")
            
            try:
                import subprocess
                result = subprocess.run(
                    [sys.executable, "tools/scripts/vsearch", "search", custom_query, "--limit", "5"],
                    cwd=self.project_root,
                    capture_output=True,
                    text=True,
                    timeout=30
                )
                
                if result.returncode == 0:
                    console.print(result.stdout)
                else:
                    console.print("[red]Search failed[/red]")
                    
            except Exception as e:
                console.print(f"[red]Error: {e}[/red]")
                
    def feature_showcase(self):
        """Showcase key features"""
        console.print("\n" + "="*50)
        console.print("[bold cyan]‚ú® Step 4: Feature Showcase[/bold cyan]")
        
        features = [
            ("üìä System Info", "tools/scripts/vsearch info", "Check system status"),
            ("üîç Advanced Search", "tools/scripts/vsearch search 'query' --type email", "Filter by content type"),
            ("üß† Duplicate Detection", "tools/scripts/vsearch dedup find --threshold 0.8", "Find similar content"),
            ("üìà Full System Run", "tools/scripts/run_full_system", "Complete sync and processing"),
        ]
        
        console.print("\n[yellow]Your Email Sync System includes:[/yellow]")
        
        table = Table(title="Available Features")
        table.add_column("Feature", style="cyan")
        table.add_column("Command", style="green")
        table.add_column("Description", style="white")
        
        for feature, command, description in features:
            table.add_row(feature, command, description)
            
        console.print(table)
        
        demo_feature = questionary.select(
            "\nüéØ Which feature would you like to demo?",
            choices=[f[0] for f in features] + ["Skip demo"]
        ).ask()
        
        if demo_feature != "Skip demo":
            feature_cmd = next(f[1] for f in features if f[0] == demo_feature)
            console.print(f"\n[cyan]Running: {feature_cmd}[/cyan]")
            
            try:
                # Run the selected command
                parts = feature_cmd.split()
                result = subprocess.run(
                    [sys.executable] + parts,
                    cwd=self.project_root,
                    timeout=60
                )
                
                if result.returncode == 0:
                    console.print("[green]‚úÖ Demo completed successfully![/green]")
                else:
                    console.print("[red]‚ùå Demo encountered an error[/red]")
                    
            except subprocess.TimeoutExpired:
                console.print("[yellow]‚è±Ô∏è  Demo timed out (this is normal for long operations)[/yellow]")
            except Exception as e:
                console.print(f"[red]Demo error: {e}[/red]")
                
    def completion_summary(self):
        """Show completion summary and next steps"""
        console.print("\n" + "="*70)
        console.print(Panel.fit(
            "[bold green]üéâ Congratulations![/bold green]\n\n"
            "[yellow]Your Email Sync System is ready to use![/yellow]\n\n"
            "[cyan]What you can do now:[/cyan]\n"
            "‚Ä¢ Search your emails: [white]vsearch search 'your query'[/white]\n"
            "‚Ä¢ Run full sync: [white]tools/scripts/run_full_system[/white]\n"
            "‚Ä¢ Check system status: [white]vsearch info[/white]\n"
            "‚Ä¢ Find duplicates: [white]vsearch dedup find[/white]\n\n"
            "[cyan]Advanced features:[/cyan]\n"
            "‚Ä¢ Legal analysis: [white]vsearch legal process 'case'[/white]\n"
            "‚Ä¢ Smart search: [white]vsearch intelligence smart-search 'query'[/white]\n"
            "‚Ä¢ Document clustering: [white]vsearch intelligence cluster[/white]\n\n"
            "[dim]Tip: Run 'vsearch --help' to see all commands[/dim]",
            title="üöÄ You're All Set!",
            border_style="green",
            padding=(1, 2)
        ))
        
        # Save completion
        self.progress["tutorial_complete"] = True
        self.progress["completion_date"] = datetime.now().isoformat()
        self._save_progress()
        
        # Show quick reference
        save_reference = questionary.confirm(
            "\nüíæ Save a quick reference guide?",
            default=True
        ).ask()
        
        if save_reference:
            self.create_quick_reference()
            
    def create_quick_reference(self):
        """Create a quick reference guide"""
        reference_content = """# Email Sync System - Quick Reference

## üöÄ Quick Start Commands
```bash
# Search emails
vsearch search "your query"

# Full system sync
tools/scripts/run_full_system

# System status
vsearch info

# Help
vsearch --help
```

## üîç Search Examples
```bash
# Basic search
vsearch search "maintenance"

# Filter by type
vsearch search "contract" --type email

# Date filtering
vsearch search "payment" --since "last month"

# Advanced search with limits
vsearch search "legal" --limit 10
```

## üß† Intelligence Features
```bash
# Smart search with query expansion
vsearch intelligence smart-search "contract dispute"

# Find similar documents
vsearch intelligence similarity doc_123

# Cluster similar content
vsearch intelligence cluster --threshold 0.8

# Find duplicates
vsearch dedup find --show-groups
```

## ‚öôÔ∏è System Management
```bash
# Full system health check
vsearch health --verbose

# Database statistics
vsearch info

# Clean up old data
make cleanup
```

## üîß Troubleshooting
```bash
# Re-run setup
tools/scripts/setup_wizard

# Check logs
tail -f logs/gmail_service_$(date +%Y%m%d).log

# Test Gmail connection
python3 -c "from gmail.oauth import GmailAuth; print(GmailAuth().get_credentials())"
```

## üìÅ Important Files
- `emails.db` - Your email database
- `gmail/config.py` - Email filters configuration
- `.mcp.json` - Claude Desktop integration
- `logs/` - System logs

## üÜò Need Help?
1. Check logs in `logs/` directory
2. Run `vsearch health` for system status
3. Re-run setup wizard if needed
4. Check README.md for detailed documentation

Generated on: """ + datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        reference_path = self.project_root / "QUICK_REFERENCE.md"
        reference_path.write_text(reference_content)
        
        console.print(f"\n[green]‚úÖ Quick reference saved to: {reference_path}[/green]")
        
    def run_sync_demo(self):
        """Quick sync demo for returning users"""
        console.print("\n[bold cyan]üì• Quick Sync Demo[/bold cyan]")
        
        try:
            from gmail.main import GmailService
            service = GmailService()
            result = service.sync_incremental(max_results=50)
            
            if result["success"]:
                console.print(f"‚úÖ Synced {result.get('processed', 0)} new emails")
                console.print(f"  Duplicates: {result.get('duplicates', 0)}")
            else:
                console.print(f"‚ùå Sync failed: {result.get('error')}")
                
        except Exception as e:
            console.print(f"‚ùå Error: {e}")
            
    def search_demo(self):
        """Quick search demo"""
        console.print("\n[bold cyan]üîç Search Demo[/bold cyan]")
        
        query = questionary.text("Enter search term:").ask()
        if query:
            try:
                import subprocess
                result = subprocess.run(
                    [sys.executable, "tools/scripts/vsearch", "search", query, "--limit", "5"],
                    cwd=self.project_root,
                    capture_output=True,
                    text=True,
                    timeout=30
                )
                
                if result.returncode == 0:
                    console.print(result.stdout)
                else:
                    console.print("[red]Search failed[/red]")
                    
            except Exception as e:
                console.print(f"[red]Error: {e}[/red]")
                
    def system_status(self):
        """Show detailed system status"""
        console.print("\n[bold cyan]üìä System Status[/bold cyan]")
        
        try:
            import subprocess
            result = subprocess.run(
                [sys.executable, "tools/scripts/vsearch", "info"],
                cwd=self.project_root,
                capture_output=True,
                text=True,
                timeout=30
            )
            
            if result.returncode == 0:
                console.print(result.stdout)
            else:
                console.print("[red]Status check failed[/red]")
                
        except Exception as e:
            console.print(f"[red]Error: {e}[/red]")
            
    def run(self):
        """Run the complete first-run guide"""
        try:
            # Check if user is returning
            if self.welcome_back_user():
                return
                
            # New user flow
            self.introduction()
            
            # Step 1: Validate setup
            checks = self.validate_setup()
            if not self.show_validation_results(checks):
                console.print("\n[yellow]Please fix the issues and run the guide again.[/yellow]")
                return
                
            # Step 2: First sync
            if not self.progress.get("first_sync_complete"):
                if not self.first_sync_tutorial():
                    console.print("\n[yellow]Sync tutorial incomplete. You can continue later.[/yellow]")
                    return
                    
            # Step 3: Search tutorial
            self.search_tutorial()
            
            # Step 4: Feature showcase
            self.feature_showcase()
            
            # Completion
            self.completion_summary()
            
        except KeyboardInterrupt:
            console.print("\n[yellow]Guide interrupted. You can resume anytime with:[/yellow]")
            console.print("  [cyan]tools/scripts/first_run_guide[/cyan]")
        except Exception as e:
            console.print(f"\n[red]Error: {e}[/red]")
            console.print("Check logs for more details.")


def main():
    """Main entry point"""
    guide = FirstRunGuide()
    guide.run()


if __name__ == "__main__":
    main()