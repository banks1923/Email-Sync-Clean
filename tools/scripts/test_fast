#!/usr/bin/env python3
"""
Fast test runner for CI/CD pipelines.
Runs unit tests first, then integration tests if unit tests pass.
"""

import subprocess
import sys
import time
from pathlib import Path

def run_command(cmd, description):
    """Run a command and return success status."""
    print(f"\n{'=' * 60}")
    print(f"🔄 {description}")
    print(f"{'=' * 60}")
    
    start_time = time.time()
    result = subprocess.run(cmd, shell=True)
    duration = time.time() - start_time
    
    if result.returncode == 0:
        print(f"✅ {description} completed in {duration:.2f}s")
        return True
    else:
        print(f"❌ {description} failed after {duration:.2f}s")
        return False

def main():
    """Main test runner."""
    print("🚀 Email Sync Fast Test Runner")
    print("Running categorized tests for efficient CI/CD")
    
    # Change to project root
    project_root = Path(__file__).parent.parent.parent
    os.chdir(project_root)
    
    # Stage 1: Unit Tests (fast, isolated)
    unit_cmd = "pytest -m 'unit' --tb=short --maxfail=5 -q"
    if not run_command(unit_cmd, "Unit Tests (Fast & Isolated)"):
        print("\n❌ Unit tests failed. Stopping execution.")
        return 1
    
    # Stage 2: Integration Tests (slower, cross-service)
    integration_cmd = "pytest -m 'integration' --tb=short --maxfail=3 -q"
    if not run_command(integration_cmd, "Integration Tests (Cross-Service)"):
        print("\n⚠️  Integration tests failed. Unit tests passed.")
        return 1
    
    # Stage 3: All other tests (optional, can be run separately)
    other_cmd = "pytest -m 'not unit and not integration and not slow' --tb=short --maxfail=3 -q"
    run_command(other_cmd, "Other Tests (Optional)")
    
    print("\n🎉 All tests completed successfully!")
    print("\nTest Categories Available:")
    print("  • unit: Fast, isolated tests (good for TDD)")
    print("  • integration: Cross-service tests")
    print("  • slow: Performance tests (run separately)")
    print("  • requires_models: AI model tests (optional)")
    print("  • requires_auth: Authentication tests (optional)")
    
    return 0

if __name__ == "__main__":
    import os
    sys.exit(main())