#!/usr/bin/env python3
"""
Update documentation with auto-generated line counts and service information.
Replaces manual claims with data from the audit system.
"""

import json
import re
import sys
from pathlib import Path

# Add the project root to Python path so we can import the audit module
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

from tools.docs.audit import DocumentationAuditor


def format_service_table(services: list) -> str:
    """Generate markdown table of services with line counts."""
    
    # Filter out services with 0 lines (non-existent)  
    # Handle both dict and object formats
    existing_services = []
    for s in services:
        total_lines = s.get('total_lines', 0) if isinstance(s, dict) else s.total_lines
        if total_lines > 0:
            existing_services.append(s)
    
    lines = [
        "<!-- AUTO-GENERATED SERVICE COUNTS - DO NOT EDIT BY HAND -->",
        "<!-- Generated by make docs-audit - data from tools/docs/audit.py -->",
        "",
        "| Service | Directory | Total Lines | Code Lines |",
        "|---------|-----------|-------------|------------|"
    ]
    
    # Sort by total lines, handle both dict and object formats
    sorted_services = sorted(existing_services, key=lambda s: s.get('total_lines', 0) if isinstance(s, dict) else s.total_lines, reverse=True)
    
    for service in sorted_services:
        if isinstance(service, dict):
            name = service['service']
            total = service['total_lines']
            code = service['code_lines']
        else:
            name = service.service
            total = service.total_lines
            code = service.code_lines
        lines.append(f"| {name} | `{name}/` | {total:,} | {code:,} |")
    
    total_lines = sum(s.get('total_lines', 0) if isinstance(s, dict) else s.total_lines for s in existing_services)
    total_code = sum(s.get('code_lines', 0) if isinstance(s, dict) else s.code_lines for s in existing_services)
    
    lines.extend([
        f"| **TOTAL** | **All Services** | **{total_lines:,}** | **{total_code:,}** |",
        "",
        "<!-- END AUTO-GENERATED SERVICE COUNTS -->"
    ])
    
    return "\n".join(lines)


def update_claude_md(audit_report: dict, file_path: Path) -> bool:
    """Update CLAUDE.md with accurate line counts and service information."""
    
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Extract service data from audit report
    services = audit_report['services']
    total_lines = audit_report['total_service_lines']
    code_lines = audit_report['total_code_lines']
    
    # Replace the false "550 lines" claim with actual data
    old_status = """## Current Architecture Status

- **Structure**: Flat Pythonic layout (no more `src/app/core/` nesting!)
- **Clean Services**: 550 lines replacing 2000+ lines (75% reduction)
- **Scripts**: 13 essential scripts (down from 35)
- **Documentation**: Consolidated to core files only
- **Testing**: Focus on real functionality, 89% less mocks
- **Pipeline Status**: ‚úÖ Working (484 documents processed, export pipeline operational)"""

    new_status = f"""## Current Architecture Status

- **Structure**: Flat Pythonic layout (no more `src/app/core/` nesting!)
- **Services**: {total_lines:,} total lines ({code_lines:,} code lines) across {len([s for s in services if s['total_lines'] > 0])} active services
- **Scripts**: 13 essential scripts (down from 35)
- **Documentation**: Consolidated to core files only
- **Testing**: Focus on real functionality, 89% less mocks
- **Pipeline Status**: ‚úÖ Working (484 documents processed, export pipeline operational)"""

    content = content.replace(old_status, new_status)
    
    # Remove transcription from service lists since it doesn't exist
    # Find the service overview section and update it
    service_overview_pattern = r'(### Core Business Services.*?- \*\*Transcription\*\* \(`transcription/`\): Audio/video processing with Whisper\n)(.*?)(### Utility Services)'
    
    def remove_transcription(match):
        before = match.group(1).replace('- **Transcription** (`transcription/`): Audio/video processing with Whisper\n', '')
        middle = match.group(2)
        after = match.group(3)
        return before + middle + after
    
    content = re.sub(service_overview_pattern, remove_transcription, content, flags=re.DOTALL)
    
    # Add service counts table in the services overview section
    # Find a good place to insert the service table
    overview_section = "## üìä Key Services Overview"
    if overview_section in content:
        # Find the position after the overview header
        overview_pos = content.find(overview_section)
        if overview_pos != -1:
            # Find the end of the header line
            next_section = content.find('\n\n### ', overview_pos)
            if next_section != -1:
                # Insert the service table before the next section
                service_table = f"\n\n{format_service_table(services)}\n"
                content = content[:next_section] + service_table + content[next_section:]
    
    # Write updated content back
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(content)
    
    return True


def update_readme_md(audit_report: dict, file_path: Path) -> bool:
    """Update README.md if it has similar false claims."""
    
    if not file_path.exists():
        return False
        
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Look for and update any "550 lines" or similar claims
    total_lines = audit_report['total_service_lines']
    audit_report['total_code_lines']
    
    # Replace patterns that mention the old line count
    patterns = [
        (r'550 lines replacing 2000\+ lines \(75% reduction\)', f'{total_lines:,} lines across all services'),
        (r'550 lines', f'{total_lines:,} lines'),
    ]
    
    updated = False
    for old_pattern, new_text in patterns:
        if re.search(old_pattern, content):
            content = re.sub(old_pattern, new_text, content)
            updated = True
    
    if updated:
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
    
    return updated


def main():
    """Main entry point."""
    import argparse
    
    parser = argparse.ArgumentParser(description="Update documentation with audit data")
    parser.add_argument("--project-root", default=".", help="Project root directory")
    parser.add_argument("--dry-run", action="store_true", help="Show what would be changed without modifying files")
    
    args = parser.parse_args()
    
    project_root = Path(args.project_root).resolve()
    
    # Get audit data
    auditor = DocumentationAuditor(str(project_root))
    auditor.generate_report()
    audit_data = json.loads(auditor.output_json())
    
    print("üìä Current Service Status:")
    print(f"   Total Lines: {audit_data['total_service_lines']:,}")
    print(f"   Code Lines: {audit_data['total_code_lines']:,}")
    print(f"   Active Services: {len([s for s in audit_data['services'] if s['total_lines'] > 0])}")
    print()
    
    if args.dry_run:
        print("üîç DRY RUN MODE - No files will be modified")
        print()
        
        print("Would update CLAUDE.md with:")
        print("- Correct line counts")
        print("- Remove transcription service references")
        print("- Add auto-generated service table")
        print()
        
        print("Service table preview:")
        print(format_service_table(audit_data['services']))
        return
    
    # Update CLAUDE.md
    claude_md = project_root / "CLAUDE.md"
    if claude_md.exists():
        print("üìù Updating CLAUDE.md...")
        if update_claude_md(audit_data, claude_md):
            print("‚úÖ CLAUDE.md updated with correct line counts")
        else:
            print("‚ö†Ô∏è  No updates made to CLAUDE.md")
    
    # Update README.md
    readme_md = project_root / "README.md"  
    if readme_md.exists():
        print("üìù Updating README.md...")
        if update_readme_md(audit_data, readme_md):
            print("‚úÖ README.md updated with correct line counts")
        else:
            print("‚ÑπÔ∏è  No line count claims found in README.md")
    
    print()
    print("‚úÖ Documentation update complete!")
    print("üìã Run 'make docs-audit-summary' to verify changes")


if __name__ == "__main__":
    main()