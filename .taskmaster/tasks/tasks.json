{
  "master": {
    "tasks": [
      {
        "id": 32,
        "title": "Introduce explicit Search exception hierarchy",
        "description": "Create search_intelligence/exceptions.py defining SearchError, ValidationError, VectorStoreError, EnrichmentError and replace generic Exception handling across package.",
        "details": "1. Add exceptions.py with classes inheriting from built-in Exception.\n2. Update basic_search.py, similarity.py, duplicate_detector.py to `from .exceptions import *` and raise specific errors.\n3. Remove all broad `except Exception:` blocks; catch explicit subclasses where unavoidable.\n4. Add module-level re-export in __init__.py for backwards compatibility: `from .exceptions import *  # noqa`",
        "testStrategy": "• Grep for `except Exception` – expect 0 matches.\n• Unit test: raise ValidationError in search and assert correct propagation.\n• Pytest `raises(SearchError)` for each public function when invalid input supplied.",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 33,
        "title": "Implement comprehensive input validation layer",
        "description": "Validate query, limit, filters, and date formats at API boundary for search() and find_literal().",
        "details": "1. Add validators.py with `validate_search_params` per PRD.\n2. Incorporate into search() & find_literal(): call validator before any DB access.\n3. Clamp limit 1‒200; coerce or reject invalid types; verify filters dict & date RFC3339.\n4. On failure raise ValidationError.",
        "testStrategy": "• Parameterized pytest covering: negative limit, >200, empty query, wrong filter type, bad date.\n• Fuzz test random unicode input – expect ValidationError not crash.",
        "priority": "high",
        "dependencies": [
          32
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 34,
        "title": "Refactor find_literal() for SQL-safe whitelisted searches",
        "description": "Eliminate SQL injection by parameterized queries, whitelist fields, and integrate LIKE pattern escaping.",
        "details": "1. Define ALLOWED_LITERAL_FIELDS frozenset in basic_search.py.\n2. Implement `_escape_like(pattern)` utility using double-escape technique.\n3. Build WHERE clause only for allowed fields; use `?` placeholders.\n4. Execute via SimpleDB cursor `execute(sql, params)`.\n5. Remove any f-string SQL interpolation.\n6. Unit tests updated to new signature.",
        "testStrategy": "• SQL injection test cases from PRD – verify no results & no exceptions.\n• Static scan with bandit – expect no high severities.\n• Examine sqlite `query_plan` – ensure indices still used.",
        "priority": "high",
        "dependencies": [
          32,
          33
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 35,
        "title": "Replace N+1 enrichment with batched enrichment function",
        "description": "Implement _enrich_vector_results_batch using 500-item chunks to fetch content data in bulk.",
        "details": "1. Add function to basic_search.py per PRD snippet.\n2. Remove / rename old _enrich_vector_results; update all call sites.\n3. Use list comprehension to build content_id list, iterate in range(0,len,…,500).\n4. Handle missing IDs gracefully; on DB timeout raise EnrichmentError.",
        "testStrategy": "• Unit test with 1000 fake vector rows – assert only 2 DB calls (patch cursor.execute counter).\n• Perf test: <200 ms for 1000 rows on sample DB.",
        "priority": "high",
        "dependencies": [
          34
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 36,
        "title": "Optimize SQLite connection settings and lightweight pooling",
        "description": "Apply WAL journal, busy_timeout, synchronous=NORMAL and implement singleton connection pool for single-user mode.",
        "details": "1. Create db.py; implement `get_connection()` caching sqlite3.Connection with PRAGMA settings executed once.\n2. Replace direct sqlite3.connect calls in package with get_connection().\n3. Ensure threadsafety by check_same_thread=False (single process guarantee documented).",
        "testStrategy": "• Integration test: concurrent ThreadPool search calls – no `database is locked` errors.\n• Confirm PRAGMA settings by querying `PRAGMA journal_mode` and `PRAGMA synchronous`.",
        "priority": "medium",
        "dependencies": [
          35
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 37,
        "title": "Remove SearchIntelligenceService class and deprecated main.py",
        "description": "Delete obsolete abstractions, reduce __init__.py to 13 lines exporting only public APIs.",
        "details": "1. Delete search_intelligence/main.py.\n2. Remove SearchIntelligenceService class; search for imports & replace with direct search()/find_literal().\n3. Shrink __init__.py: `from .basic_search import search, find_literal, vector_store_available` plus exception re-exports.\n4. Ensure no remaining references via grep.",
        "testStrategy": "• run `pytest -q` – no ImportError.\n• Grep for `SearchIntelligenceService` and `main.py` – expect 0 hits.",
        "priority": "high",
        "dependencies": [
          36
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 38,
        "title": "Standardize field names across codebase and MCP server",
        "description": "Rename ‘relevance_score’→‘semantic_score’, ‘id’→‘content_id’, etc., ensuring serialization consistency.",
        "details": "1. Update data mappers in basic_search.py to output standardized schema.\n2. Modify infrastructure/mcp_servers/search_intelligence_mcp.py and associated dataclasses.\n3. Provide temporary shim in MCP layer to accept both names but emit deprecation warning.",
        "testStrategy": "• Integration test: search() returns dict with exact key set.\n• MCP server functional tests validate field names using jsonschema.",
        "priority": "high",
        "dependencies": [
          37
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 39,
        "title": "Delete compatibility shims and other dead hybrid-search code",
        "description": "Purge outdated functions, __init__ alias exports, and hybrid search remnants to reduce architectural debt.",
        "details": "1. Identify shims via TODO/HYBRID_SEARCH comments.\n2. Remove modules; adjust imports.\n3. Ensure none exceed 450 lines after cleanup.",
        "testStrategy": "• Coverage run – unchanged % after deletion.\n• Static import check: `python -m pip install check-imports`; expect pass.",
        "priority": "medium",
        "dependencies": [
          38
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 40,
        "title": "Revise and expand automated test suite",
        "description": "Update 15 affected test files to new API and add dedicated security, performance, and boundary tests.",
        "details": "1. Refactor existing tests to import search, find_literal.\n2. Create tests/test_semantic_search_security.py implementing SQLi & boundary tests.\n3. Add batch enrichment stress test with pytest-benchmark.\n4. Update fixtures paths as needed.",
        "testStrategy": "• `pytest -n auto` all green.\n• Security tests intentionally inject malicious input – expect ValidationError.\n• Coverage ≥ 90%.",
        "priority": "high",
        "dependencies": [
          39
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 41,
        "title": "Update MCP server tools to new API and field schema",
        "description": "Modify 4 tools under infrastructure/mcp_servers and utilities to import search_intelligence.search and respect new field names.",
        "details": "1. Replace `get_search_intelligence_service()` calls.\n2. Adjust JSON handling for semantic_score/content_id.\n3. Add unit tests for each tool script using pytest-subprocess.",
        "testStrategy": "• CLI invocation in dry-run mode returns exit code 0 and correct JSON keys.\n• Contract tests using sample payloads.",
        "priority": "medium",
        "dependencies": [
          38,
          40
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 42,
        "title": "Refactor CLI handlers and service orchestrator",
        "description": "Update 7 CLI scripts and pipeline orchestrator to use new functions, remove deprecated imports.",
        "details": "1. tools/scripts/cli/*.py – import search_intelligence.search.\n2. Update argument parsing to include new limit bounds.\n3. Add --validate flag to run validators only.",
        "testStrategy": "• Invoke each CLI with --help – no stack trace.\n• End-to-end test: pipeline orchestrator runs successfully in staging DB.",
        "priority": "medium",
        "dependencies": [
          41
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 43,
        "title": "Strengthen logging and error reporting",
        "description": "Ensure critical errors are logged at ERROR level, deprecate misuse of logger.warning, and include exception context.",
        "details": "1. Add get_logger helper returning structlog-wrapped logger with JSON sinks when available.\n2. Replace logger.warning usages for critical paths → logger.error then raise.\n3. Attach request_id / trace_id metadata where possible.",
        "testStrategy": "• Unit test capturing logs with caplog – assert level.\n• Chaos test: force VectorStoreError – logs contain stack + context.",
        "priority": "low",
        "dependencies": [
          32,
          42
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 44,
        "title": "Update documentation and migration guides",
        "description": "Refresh CHANGELOG, SERVICES_API.md, inline docstrings, and create migration guide for downstream teams.",
        "details": "1. Auto-generate API docs via pdoc.\n2. Draft MIGRATION_SEMANTIC_SEARCH.md with code examples.\n3. Add PRD success criteria checklist to docs.",
        "testStrategy": "• `pydocstyle` passes.\n• Build docs with mkdocs – no warnings.",
        "priority": "low",
        "dependencies": [
          42
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 45,
        "title": "Final performance benchmarking & validation",
        "description": "Run load tests, ensure success criteria met, and tag release.",
        "details": "1. Use Locust to simulate 20 concurrent searches of 100 results → <1s avg.\n2. Memory profiling with tracemalloc – peak <100 MB.\n3. Run full security scan (bandit, safety).\n4. Tag v1.3.0-semantic-fix in git.",
        "testStrategy": "• Attach locust report; assert KPIs.\n• CI pipeline must pass security gates.\n• Manual smoke test via CLI & MCP.",
        "priority": "medium",
        "dependencies": [
          40,
          42,
          43
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-08-26T12:35:13.360Z",
      "updated": "2025-09-04T09:39:30.563Z",
      "description": "Tasks for master context"
    }
  }
}