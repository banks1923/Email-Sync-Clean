## CLAUDE.md Compliance Verification Checklist

### Automated Compliance Checks
Each subtask must verify compliance with Email Sync architecture principles:

### File Size Limits
- [ ] New Python files under 450 lines (existing working files may exceed)
- [ ] Use `wc -l *.py` to verify line counts
- [ ] Split large files using single responsibility principle

### Function Complexity Limits
- [ ] Functions under 30 lines (orchestration functions may exceed)
- [ ] Cyclomatic complexity under 10 per function
- [ ] Use tools like `radon cc` for complexity analysis

### Architecture Patterns (Required)
- [ ] **Simple > Complex**: Direct function calls, no factories
- [ ] **Working > Perfect**: Solutions that work today
- [ ] **Direct > Indirect**: Import and use directly
- [ ] **Flat > Nested**: Keep nesting shallow

### Anti-Patterns (Forbidden)
- [ ] **No Enterprise Patterns**: No dependency injection, abstract classes, or factories
- [ ] **No Over-Engineering**: This is a single-user hobby project
- [ ] **No Complex Routing**: Simple if/else for dispatch
- [ ] **No God Modules**: Each module has ONE purpose

### Integration Requirements
- [ ] Import existing services directly (no facades)
- [ ] Use SimpleDB for all database operations
- [ ] Leverage existing error_handler.py and logging_config.py
- [ ] Follow existing service patterns (embeddings/, search/, etc.)

### Service Independence
- [ ] No cross-service imports between core services
- [ ] Each service can be tested in isolation
- [ ] Shared utilities only in shared/ directory

### Import Style
```python
# GOOD: Direct imports
from shared.simple_db import SimpleDB
from embeddings import get_embedding_service

# BAD: Complex imports
from src.app.core.services.database.factory import DatabaseFactory
```

### Verification Commands
```bash
# Check file sizes
find . -name "*.py" -exec wc -l {} + | sort -n

# Check complexity
radon cc --min=B .

# Run architecture tests
python -m pytest tests/architecture/
```
