#!/usr/bin/env python3
"""
Test script for transcription configuration system.

Tests all three modes (LOCAL_GPU, HYBRID, OPENAI_ONLY) and configuration features.
Run from project root: python -m transcription.test_config
"""

import os
import sys
import tempfile
from pathlib import Path

# Add project root to path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from transcription.config import TranscriptionMode, get_config_manager
from transcription.main import get_transcription_service
from transcription.provider_factory import get_provider_factory


def test_configuration_system():
    """Test the complete configuration system."""
    print("=" * 60)
    print("TRANSCRIPTION CONFIGURATION SYSTEM TEST")
    print("=" * 60)
    
    # Test 1: Configuration Manager Initialization
    print("\n1. Testing Configuration Manager...")
    try:
        config_manager = get_config_manager()
        current_mode = config_manager.get_mode()
        print("‚úì Configuration manager initialized")
        print(f"  Current mode: {current_mode.value}")
        
        # Test diagnostics
        diagnostics = config_manager.get_diagnostics()
        print(f"  Config file: {diagnostics['config_file']}")
        print(f"  Providers available: {diagnostics['provider_availability']}")
        
    except Exception as e:
        print(f"‚úó Configuration manager failed: {e}")
        return False
    
    # Test 2: Provider Factory
    print("\n2. Testing Provider Factory...")
    try:
        factory = get_provider_factory()
        all_providers = factory.check_all_providers()
        
        print("‚úì Provider factory initialized")
        for mode, status in all_providers.items():
            available = "‚úì" if status["available"] else "‚úó"
            print(f"  {available} {mode}: {status.get('error', 'Available')}")
        
        # Test recommendations
        recommendation = factory.get_recommended_mode()
        print(f"  Recommended mode: {recommendation['recommended_mode']}")
        if recommendation['recommended_mode']:
            print(f"  Reason: {recommendation['reason']}")
        
    except Exception as e:
        print(f"‚úó Provider factory failed: {e}")
        return False
    
    # Test 3: Mode Switching
    print("\n3. Testing Mode Switching...")
    try:
        original_mode = config_manager.get_mode()
        
        # Try switching to each mode
        for mode in TranscriptionMode:
            print(f"  Testing mode: {mode.value}")
            availability = factory.check_provider_availability(mode)
            
            if availability["available"]:
                result = config_manager.set_mode(mode)
                if result["success"]:
                    print(f"    ‚úì Successfully switched to {mode.value}")
                    # Switch back
                    config_manager.set_mode(original_mode)
                else:
                    print(f"    ‚úó Failed to switch: {result['error']}")
            else:
                print(f"    - Skipped (not available): {availability['error']}")
        
    except Exception as e:
        print(f"‚úó Mode switching failed: {e}")
        return False
    
    # Test 4: TranscriptionService Integration
    print("\n4. Testing TranscriptionService Integration...")
    try:
        # Create service with default mode
        service = TranscriptionService()
        status = service.get_configuration_status()
        
        print("‚úì TranscriptionService initialized")
        print(f"  Current mode: {status['current_mode']}")
        print(f"  Current provider: {status['current_provider']}")
        print(f"  Provider available: {status['provider_available']}")
        
        # Test auto-configuration
        auto_result = service.auto_configure()
        if auto_result["success"]:
            print(f"  ‚úì Auto-configuration: {auto_result.get('message', 'Success')}")
        else:
            print(f"  ‚úó Auto-configuration failed: {auto_result['error']}")
        
    except Exception as e:
        print(f"‚úó TranscriptionService integration failed: {e}")
        return False
    
    # Test 5: Configuration Persistence
    print("\n5. Testing Configuration Persistence...")
    try:
        # Create temporary config file
        with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
            temp_config = f.name
        
        # Create config manager with temp file
        from transcription.config import TranscriptionConfigManager
        temp_manager = TranscriptionConfigManager(temp_config)
        
        # Test saving
        save_result = temp_manager.save_configuration()
        if save_result["success"]:
            print(f"‚úì Configuration saved to: {temp_config}")
            
            # Verify file exists and can be loaded
            if os.path.exists(temp_config):
                new_manager = TranscriptionConfigManager(temp_config)
                print("‚úì Configuration loaded from file")
                print(f"  Mode: {new_manager.get_mode().value}")
            else:
                print("‚úó Config file not created")
        else:
            print(f"‚úó Failed to save configuration: {save_result['error']}")
        
        # Cleanup
        try:
            os.unlink(temp_config)
        except (FileNotFoundError, OSError):
            pass
            
    except Exception as e:
        print(f"‚úó Configuration persistence failed: {e}")
        return False
    
    # Test 6: Environment Variable Override
    print("\n6. Testing Environment Variable Overrides...")
    try:
        # Set test environment variables
        os.environ["TRANSCRIPTION_MODE"] = "OPENAI_ONLY"
        os.environ["WHISPER_MODEL"] = "base"
        
        # Create new config manager to pick up env vars
        from transcription.config import TranscriptionConfigManager
        env_manager = TranscriptionConfigManager()
        
        print("‚úì Environment variables processed")
        diagnostics = env_manager.get_diagnostics()
        env_overrides = diagnostics["environment_overrides"]
        
        for key, value in env_overrides.items():
            if value:
                print(f"  {key}: {value}")
        
        # Cleanup
        del os.environ["TRANSCRIPTION_MODE"]
        del os.environ["WHISPER_MODEL"]
        
    except Exception as e:
        print(f"‚úó Environment variable override failed: {e}")
        return False
    
    # Test 7: Error Handling
    print("\n7. Testing Error Handling...")
    try:
        # Test invalid mode
        try:
            config_manager.set_mode("INVALID_MODE")
            print("‚úó Invalid mode should have failed")
        except (ValueError, TypeError):
            print("‚úì Invalid mode properly rejected")
        
        # Test provider creation with unavailable mode
        factory = get_provider_factory()
        
        # This might succeed or fail depending on what's available
        print("‚úì Error handling tests completed")
        
    except Exception as e:
        print(f"‚úó Error handling test failed: {e}")
        return False
    
    print("\n" + "=" * 60)
    print("CONFIGURATION SYSTEM TEST RESULTS")
    print("=" * 60)
    print("‚úì All tests completed successfully!")
    
    # Final status report
    final_service = TranscriptionService()
    final_status = final_service.get_configuration_status()
    
    print("\nFinal Status:")
    print(f"  Mode: {final_status['current_mode']}")
    print(f"  Provider: {final_status['current_provider']}")
    print(f"  Available: {final_status['provider_available']}")
    print(f"  Recommended: {final_status['recommended']['recommended_mode']}")
    
    return True


def test_cost_estimation():
    """Test cost estimation features."""
    print("\n" + "=" * 60)
    print("COST ESTIMATION TEST")
    print("=" * 60)
    
    try:
        config_manager = get_config_manager()
        
        # Test different durations
        test_durations = [1, 5, 10, 30, 60]  # minutes
        
        for duration in test_durations:
            cost_info = config_manager.estimate_cost(duration)
            print(f"\nDuration: {duration} minutes")
            print(f"Mode: {cost_info['mode']}")
            
            if "openai" in cost_info["costs"]:
                openai_cost = cost_info["costs"]["openai"]
                print(f"OpenAI cost: ${openai_cost['cost_usd']:.3f}")
                print(f"Within limit: {openai_cost['within_limit']}")
            
            if "local" in cost_info["costs"]:
                local_cost = cost_info["costs"]["local"]
                print(f"Estimated compute: {local_cost['estimated_compute_minutes']:.1f} min")
                print(f"GPU enabled: {local_cost['gpu_enabled']}")
    
    except Exception as e:
        print(f"‚úó Cost estimation test failed: {e}")
        return False
    
    print("\n‚úì Cost estimation tests completed!")
    return True


if __name__ == "__main__":
    try:
        success = test_configuration_system()
        if success:
            test_cost_estimation()
            print("\nüéâ All tests passed! Configuration system is working correctly.")
        else:
            print("\n‚ùå Some tests failed. Check the output above for details.")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  Test interrupted by user")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• Test suite crashed: {e}")
        sys.exit(1)