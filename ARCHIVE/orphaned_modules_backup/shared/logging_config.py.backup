"""
Unified logging configuration for all services.
Simple, consistent logging that actually helps debugging.
"""

import logging
import os
from datetime import datetime
from logging.handlers import RotatingFileHandler


def setup_logging(
    service_name: str,
    log_level: str = "INFO",
    log_dir: str = "logs",
    max_bytes: int = 10485760,  # 10MB
    backup_count: int = 5,
) -> logging.Logger:
    """
    Set up logging for a service with rotating file handler.

    Args:
        service_name: Name of the service (used in log filename)
        log_level: Logging level (DEBUG, INFO, WARNING, ERROR)
        log_dir: Directory for log files
        max_bytes: Max size per log file (default 10MB)
        backup_count: Number of backup files to keep (default 5)

    Returns:
        Configured logger instance
    """
    # Create logs directory if it doesn't exist
    os.makedirs(log_dir, exist_ok=True)

    # Create logger
    logger = logging.getLogger(service_name)
    logger.setLevel(getattr(logging, log_level.upper()))

    # Don't add handlers if they already exist (avoid duplicates)
    if logger.handlers:
        return logger

    # Log file path with date
    date_str = datetime.now().strftime("%Y%m%d")
    log_file = os.path.join(log_dir, f"{service_name}_{date_str}.log")

    # Create rotating file handler
    file_handler = RotatingFileHandler(log_file, maxBytes=max_bytes, backupCount=backup_count)

    # Create console handler for important messages
    console_handler = logging.StreamHandler()
    console_handler.setLevel("WARNING")

    # Create formatter
    formatter = logging.Formatter(
        "%(asctime)s - %(name)s - %(levelname)s - %(message)s", datefmt="%Y-%m-%d %H:%M:%S"
    )

    # Set formatter for both handlers
    file_handler.setFormatter(formatter)
    console_handler.setFormatter(formatter)

    # Add handlers to logger
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)

    return logger


def get_logger(name: str) -> logging.Logger:
    """
    Get or create a logger with default configuration.

    Args:
        name: Logger name (usually __name__)

    Returns:
        Configured logger
    """
    # Extract service name from module path
    # e.g., "pdf.main" -> "pdf"
    service_name = name.split(".")[0] if "." in name else name

    # Use existing logger if available, otherwise create new one
    return setup_logging(service_name)
